"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const typescript_1 = require("typescript");
// List of diagnostic codes that should be ignored
const ignoredDiagnostics = new Set([
    1308 // Support top-level `await`
]);
const loadConfig = () => {
    return {
        moduleResolution: typescript_1.ModuleResolutionKind.NodeJs,
        skipLibCheck: true,
        target: typescript_1.ScriptTarget.ES2015
    };
};
/**
 * Get a list of TypeScript diagnostics within the current context.
 *
 * @param context - The context object.
 * @returns List of diagnostics
 */
exports.getDiagnostics = (context) => {
    const compilerOptions = loadConfig();
    const fileName = path.join(context.cwd, context.testFile);
    const result = [];
    const program = typescript_1.createProgram([fileName], compilerOptions);
    const diagnostics = program.getSemanticDiagnostics().concat(program.getSyntacticDiagnostics());
    for (const diagnostic of diagnostics) {
        if (!diagnostic.file || ignoredDiagnostics.has(diagnostic.code)) {
            continue;
        }
        const position = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
        result.push({
            fileName: diagnostic.file.fileName,
            message: typescript_1.flattenDiagnosticMessageText(diagnostic.messageText, '\n'),
            severity: 'error',
            line: position.line + 1,
            column: position.character
        });
    }
    return result;
};
